{"user":"clickhouse","name":"clickhouse-server","namespace":"clickhouse","repository_type":"image","status":1,"status_description":"active","description":"ClickHouse is an open-source column-oriented database management system.","is_private":false,"is_automated":false,"star_count":211,"pull_count":127569506,"last_updated":"2024-04-03T08:14:32.125516Z","date_registered":"2020-07-09T13:04:17.157354Z","collaborator_count":0,"affiliation":null,"hub_user":"clickhouse","has_starred":false,"full_description":"# ClickHouse Server Docker Image\n\n## What is ClickHouse?\n\nClickHouse is an open-source column-oriented DBMS (columnar database management system) for online analytical processing (OLAP) that allows users to generate analytical reports using SQL queries in real-time.\n\nClickHouse works 100-1000x faster than traditional database management systems, and processes hundreds of millions to over a billion rows and tens of gigabytes of data per server per second.  With a widespread user base around the globe, the technology has received praise for its reliability, ease of use, and fault tolerance.\n\nFor more information and documentation see https://clickhouse.com/.\n\n## Versions\n\n- The `latest` tag points to the latest release of the latest stable branch.\n- Branch tags like `22.2` point to the latest release of the corresponding branch.\n- Full version tags like `22.2.3.5` point to the corresponding release.\n- The tag `head` is built from the latest commit to the default branch.\n- Each tag has optional `-alpine` suffix to reflect that it's built on top of `alpine`.\n\n### Compatibility\n\n- The amd64 image requires support for [SSE3 instructions](https://en.wikipedia.org/wiki/SSE3). Virtually all x86 CPUs after 2005 support SSE3.\n- The arm64 image requires support for the [ARMv8.2-A architecture](https://en.wikipedia.org/wiki/AArch64#ARMv8.2-A). Most ARM CPUs after 2017 support ARMv8.2-A. A notable exception is Raspberry Pi 4 from 2019 whose CPU only supports ARMv8.0-A.\n\n## How to use this image\n\n### start server instance\n```bash\ndocker run -d --name some-clickhouse-server --ulimit nofile=262144:262144 clickhouse/clickhouse-server\n```\n\nBy default, ClickHouse will be accessible only via the Docker network. See the [networking section below](#networking).\n\nBy default, starting above server instance will be run as the `default` user without  password.\n\n### connect to it from a native client\n\n```bash\ndocker run -it --rm --link some-clickhouse-server:clickhouse-server --entrypoint clickhouse-client clickhouse/clickhouse-server --host clickhouse-server\n# OR\ndocker exec -it some-clickhouse-server clickhouse-client\n```\n\nMore information about the [ClickHouse client](https://clickhouse.com/docs/en/interfaces/cli/).\n\n### connect to it using curl\n\n```bash\necho \"SELECT 'Hello, ClickHouse!'\" | docker run -i --rm --link some-clickhouse-server:clickhouse-server curlimages/curl 'http://clickhouse-server:8123/?query=' -s --data-binary @-\n```\n\nMore information about the [ClickHouse HTTP Interface](https://clickhouse.com/docs/en/interfaces/http/).\n\n### stopping / removing the container\n\n```bash\ndocker stop some-clickhouse-server\ndocker rm some-clickhouse-server\n```\n\n### networking\n\nYou can expose your ClickHouse running in docker by [mapping a particular port](https://docs.docker.com/config/containers/container-networking/) from inside the container using host ports:\n\n```bash\ndocker run -d -p 18123:8123 -p19000:9000 --name some-clickhouse-server --ulimit nofile=262144:262144 clickhouse/clickhouse-server\necho 'SELECT version()' | curl 'http://localhost:18123/' --data-binary @-\n```\n\n```\n22.6.3.35\n```\n\nor by allowing the container to use [host ports directly](https://docs.docker.com/network/host/) using `--network=host` (also allows achieving better network performance):\n\n```bash\ndocker run -d --network=host --name some-clickhouse-server --ulimit nofile=262144:262144 clickhouse/clickhouse-server\necho 'SELECT version()' | curl 'http://localhost:8123/' --data-binary @-\n```\n\n```\n22.6.3.35\n```\n\n### Volumes\n\nTypically you may want to mount the following folders inside your container to achieve persistency:\n\n* `/var/lib/clickhouse/` - main folder where ClickHouse stores the data\n* `/var/log/clickhouse-server/` - logs\n\n```bash\ndocker run -d \\\n    -v $(realpath ./ch_data):/var/lib/clickhouse/ \\\n    -v $(realpath ./ch_logs):/var/log/clickhouse-server/ \\\n    --name some-clickhouse-server --ulimit nofile=262144:262144 clickhouse/clickhouse-server\n```\n\nYou may also want to mount:\n\n* `/etc/clickhouse-server/config.d/*.xml` - files with server configuration adjustmenets\n* `/etc/clickhouse-server/users.d/*.xml` - files with user settings adjustmenets\n* `/docker-entrypoint-initdb.d/` - folder with database initialization scripts (see below).\n\n### Linux capabilities\n\nClickHouse has some advanced functionality, which requires enabling several [Linux capabilities](https://man7.org/linux/man-pages/man7/capabilities.7.html).\n\nThey are optional and can be enabled using the following [docker command-line arguments](https://docs.docker.com/engine/reference/run/#runtime-privilege-and-linux-capabilities):\n\n```bash\ndocker run -d \\\n    --cap-add=SYS_NICE --cap-add=NET_ADMIN --cap-add=IPC_LOCK \\\n    --name some-clickhouse-server --ulimit nofile=262144:262144 clickhouse/clickhouse-server\n```\n\n## Configuration\n\nThe container exposes port 8123 for the [HTTP interface](https://clickhouse.com/docs/en/interfaces/http_interface/) and port 9000 for the [native client](https://clickhouse.com/docs/en/interfaces/tcp/).\n\nClickHouse configuration is represented with a file \"config.xml\" ([documentation](https://clickhouse.com/docs/en/operations/configuration_files/))\n\n### Start server instance with custom configuration\n\n```bash\ndocker run -d --name some-clickhouse-server --ulimit nofile=262144:262144 -v /path/to/your/config.xml:/etc/clickhouse-server/config.xml clickhouse/clickhouse-server\n```\n\n### Start server as custom user\n\n```bash\n# $(pwd)/data/clickhouse should exist and be owned by current user\ndocker run --rm --user ${UID}:${GID} --name some-clickhouse-server --ulimit nofile=262144:262144 -v \"$(pwd)/logs/clickhouse:/var/log/clickhouse-server\" -v \"$(pwd)/data/clickhouse:/var/lib/clickhouse\" clickhouse/clickhouse-server\n```\n\nWhen you use the image with local directories mounted, you probably want to specify the user to maintain the proper file ownership. Use the `--user` argument and mount `/var/lib/clickhouse` and `/var/log/clickhouse-server` inside the container. Otherwise, the image will complain and not start.\n\n### Start server from root (useful in case of enabled user namespace)\n\n```bash\ndocker run --rm -e CLICKHOUSE_UID=0 -e CLICKHOUSE_GID=0 --name clickhouse-server-userns -v \"$(pwd)/logs/clickhouse:/var/log/clickhouse-server\" -v \"$(pwd)/data/clickhouse:/var/lib/clickhouse\" clickhouse/clickhouse-server\n```\n\n### How to create default database and user on starting\n\nSometimes you may want to create a user (user named `default` is used by default) and database on a container start. You can do it using environment variables `CLICKHOUSE_DB`, `CLICKHOUSE_USER`, `CLICKHOUSE_DEFAULT_ACCESS_MANAGEMENT` and `CLICKHOUSE_PASSWORD`:\n\n```bash\ndocker run --rm -e CLICKHOUSE_DB=my_database -e CLICKHOUSE_USER=username -e CLICKHOUSE_DEFAULT_ACCESS_MANAGEMENT=1 -e CLICKHOUSE_PASSWORD=password -p 9000:9000/tcp clickhouse/clickhouse-server\n```\n\n## How to extend this image\n\nTo perform additional initialization in an image derived from this one, add one or more `*.sql`, `*.sql.gz`, or `*.sh` scripts under `/docker-entrypoint-initdb.d`. After the entrypoint calls `initdb`, it will run any `*.sql` files, run any executable `*.sh` scripts, and source any non-executable `*.sh` scripts found in that directory to do further initialization before starting the service.\nAlso, you can provide environment variables `CLICKHOUSE_USER` \u0026 `CLICKHOUSE_PASSWORD` that will be used for clickhouse-client during initialization.\n\nFor example, to add an additional user and database, add the following to `/docker-entrypoint-initdb.d/init-db.sh`:\n\n```bash\n#!/bin/bash\nset -e\n\nclickhouse client -n \u003c\u003c-EOSQL\n    CREATE DATABASE docker;\n    CREATE TABLE docker.docker (x Int32) ENGINE = Log;\nEOSQL\n```\n\n## License\n\nView [license information](https://github.com/ClickHouse/ClickHouse/blob/master/LICENSE) for the software contained in this image.","permissions":{"read":true,"write":false,"admin":false},"media_types":["application/vnd.docker.distribution.manifest.list.v2+json","application/vnd.docker.container.image.v1+json","application/vnd.docker.distribution.manifest.v1+prettyjws","application/vnd.oci.image.index.v1+json"],"content_types":["image"],"categories":[]}
